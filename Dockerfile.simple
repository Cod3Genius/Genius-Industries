# 🏢 GENIUS INDUSTRIES - Dockerfile Simplificado para Dokploy
# Multi-stage build: Frontend + Backend + PostgreSQL

# =============================================================================
# ETAPA 1: Construir Frontend
# =============================================================================
FROM node:18-alpine AS frontend-builder

WORKDIR /frontend-build

# Copiar archivos de dependencias
COPY frontend/package*.json ./

# Instalar TODAS las dependencias (incluir dev para build)
RUN npm ci

# Copiar código fuente
COPY frontend/ ./

# Construir frontend
RUN npm run build

# =============================================================================
# ETAPA 2: Construir Backend
# =============================================================================
FROM python:3.11-slim AS backend-builder

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Instalar uv y dependencias del sistema necesarias para build
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && pip install uv

WORKDIR /backend-build

# Copiar archivos de configuración
COPY backend/pyproject.toml backend/uv.lock ./

# Instalar dependencias
RUN uv sync --frozen

# =============================================================================
# ETAPA 3: Imagen de Producción
# =============================================================================
FROM ubuntu:22.04

# Variables de entorno
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/app/.venv/bin:$PATH"

# Crear usuarios del sistema
RUN groupadd -r postgres && useradd -r -g postgres postgres && \
    groupadd -r appuser && useradd -r -g appuser appuser

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    postgresql-14 \
    postgresql-client-14 \
    postgresql-contrib-14 \
    python3.11 \
    python3.11-dev \
    python3-pip \
    nginx \
    supervisor \
    curl \
    wget \
    libpq5 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Crear enlaces simbólicos para Python
RUN ln -sf /usr/bin/python3.11 /usr/bin/python3 && \
    ln -sf /usr/bin/python3 /usr/bin/python

# Configurar directorios de PostgreSQL
RUN mkdir -p /var/lib/postgresql/14/main \
             /var/log/postgresql \
             /etc/postgresql/14/main \
             /var/run/postgresql && \
    chown -R postgres:postgres /var/lib/postgresql \
                                /var/log/postgresql \
                                /var/run/postgresql \
                                /etc/postgresql

# Configurar backend
WORKDIR /app
COPY --from=backend-builder --chown=appuser:appuser /backend-build/.venv /app/.venv
COPY --chown=appuser:appuser backend/app /app/app
COPY --chown=appuser:appuser backend/alembic.ini ./

# Configurar frontend
RUN mkdir -p /var/www/html
COPY --from=frontend-builder /frontend-build/dist /var/www/html/
RUN chown -R www-data:www-data /var/www/html

# Configurar Nginx
RUN rm -f /etc/nginx/sites-enabled/default

# Configuración simple de Nginx
RUN cat > /etc/nginx/sites-available/default << 'EOF'
upstream backend {
    server 127.0.0.1:8000;
}

server {
    listen 8080;
    server_name _;
    
    # CORS headers
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, Origin, User-Agent, X-Requested-With" always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, Origin, User-Agent, X-Requested-With";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }
    
    # API routes
    location /api/ {
        proxy_pass http://backend/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Backend docs and health
    location ~ ^/(docs|openapi\.json|health)$ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
    }
    
    # Frontend SPA
    location / {
        root /var/www/html;
        try_files $uri $uri/ /index.html;
    }
    
    # Health check
    location /nginx-health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

RUN ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

# Configurar Supervisor
RUN mkdir -p /etc/supervisor/conf.d
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:postgresql]
command=/usr/lib/postgresql/14/bin/postgres -D /var/lib/postgresql/14/main
user=postgres
autostart=true
autorestart=true
priority=100

[program:backend]
command=/app/.venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000
directory=/app
user=appuser
autostart=true
autorestart=true
priority=200
environment=PATH="/app/.venv/bin:%(ENV_PATH)s"

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
priority=300
EOF

# Script de inicio
RUN cat > /usr/local/bin/start-genius.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Iniciando GENIUS INDUSTRIES..."

# Crear directorios de logs
mkdir -p /var/log/supervisor /var/log/genius /var/log/nginx /var/log/postgresql

# Configurar PostgreSQL si no existe
if [ ! -d "/var/lib/postgresql/14/main/base" ]; then
    echo "🐘 Inicializando PostgreSQL..."
    su - postgres -c "/usr/lib/postgresql/14/bin/initdb -D /var/lib/postgresql/14/main"
    
    # Configuración básica
    cat > /var/lib/postgresql/14/main/postgresql.conf << 'PGEOF'
listen_addresses = '*'
port = 5432
max_connections = 100
shared_buffers = 128MB
PGEOF

    cat > /var/lib/postgresql/14/main/pg_hba.conf << 'PGEOF'
local   all             postgres                                peer
local   all             all                                     md5
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
host    all             all             0.0.0.0/0               md5
PGEOF

    chown postgres:postgres /var/lib/postgresql/14/main/postgresql.conf
    chown postgres:postgres /var/lib/postgresql/14/main/pg_hba.conf
fi

echo "✅ Iniciando servicios..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

RUN chmod +x /usr/local/bin/start-genius.sh

# Crear directorios de logs
RUN mkdir -p /var/log/supervisor /var/log/genius /var/log/nginx /var/log/postgresql

# Variables de entorno por defecto
ENV DATABASE_URL="postgresql://postgres:KhloeMF0911\$@localhost:5432/genius_prod" \
    ENVIRONMENT="production" \
    DOMAIN="geniusindustries.org" \
    PROJECT_NAME="Genius Industries" \
    API_V1_STR="/api/v1"

# Exponer puerto
EXPOSE 8080

# Volúmenes
VOLUME ["/var/lib/postgresql/14/main"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/nginx-health || exit 1

# Comando de entrada
ENTRYPOINT ["/usr/local/bin/start-genius.sh"]
