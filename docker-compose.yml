version: '3.6'

services:
  # Nhost Services
  postgres:
    image: postgres:14-alpine
    container_name: nhost_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./nhost/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - nhost_network

  hasura:
    image: hasura/graphql-engine:v2.33.4
    container_name: nhost_hasura
    restart: always
    depends_on:
      - postgres
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${NHOST_ADMIN_SECRET}
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "HS256", "key": "${NHOST_JWT_SECRET}"}'
      HASURA_GRAPHQL_CORS_DOMAIN: "*"
    ports:
      - "8080:8080"
    networks:
      - nhost_network

  auth:
    image: nhost/hasura-auth:latest
    container_name: nhost_auth
    restart: always
    depends_on:
      - postgres
    environment:
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "HS256", "key": "${NHOST_JWT_SECRET}"}'
      HASURA_GRAPHQL_ADMIN_SECRET: ${NHOST_ADMIN_SECRET}
      HASURA_GRAPHQL_API_URL: http://hasura:8080
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      SMTP_HOST: ${AUTH_SMTP_HOST}
      SMTP_PORT: ${AUTH_SMTP_PORT}
      SMTP_USER: ${AUTH_SMTP_USER}
      SMTP_PASS: ${AUTH_SMTP_PASS}
      SMTP_SENDER: ${AUTH_SMTP_SENDER}
    ports:
      - "1337:1337"
    networks:
      - nhost_network

  storage:
    image: nhost/hasura-storage:latest
    container_name: nhost_storage
    restart: always
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: ${NHOST_ADMIN_SECRET}
      HASURA_GRAPHQL_API_URL: http://hasura:8080
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /storage
    volumes:
      - storage_data:/storage
    ports:
      - "1338:1338"
    networks:
      - nhost_network

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nhost_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - hasura
      - auth
      - storage
    networks:
      - nhost_network

networks:
  nhost_network:
    driver: bridge

volumes:
  postgres_data:
  storage_data: 