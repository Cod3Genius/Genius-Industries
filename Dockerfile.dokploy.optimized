# 🚀 GENIUS INDUSTRIES - Dockerfile Optimizado para Dokploy
# Contenedor unificado: PostgreSQL + Backend + Frontend
# Optimizado para rendimiento, seguridad y eficiencia

# ==============================================================================
# STAGE 1: Frontend Builder (Multi-stage build para optimización)
# ==============================================================================
FROM node:18-alpine AS frontend-builder

# Instalar dependencias del sistema mínimas
RUN apk add --no-cache python3 make g++

WORKDIR /frontend

# Copiar package files primero para aprovechar Docker layer caching
COPY frontend/package*.json ./
RUN npm ci --only=production --prefer-offline --no-audit --silent

# Variables de entorno configurables
ARG VITE_API_URL=https://api.geniusindustries.org
ARG VITE_API_BASE_URL=https://api.geniusindustries.org
ARG VITE_FRONTEND_URL=https://geniusindustries.org
ARG VITE_BACKEND_URL=https://api.geniusindustries.org
ARG VITE_ENV=production
ARG NODE_ENV=production

ENV VITE_API_URL=${VITE_API_URL} \
    VITE_API_BASE_URL=${VITE_API_BASE_URL} \
    VITE_FRONTEND_URL=${VITE_FRONTEND_URL} \
    VITE_BACKEND_URL=${VITE_BACKEND_URL} \
    VITE_ENV=${VITE_ENV} \
    NODE_ENV=${NODE_ENV}

# Build frontend
COPY frontend/ ./
RUN npm run build && \
    # Limpiar archivos innecesarios para reducir tamaño
    rm -rf node_modules src public *.json *.js *.ts *.config.* .git

# ==============================================================================
# STAGE 2: Main Production Image
# ==============================================================================
FROM python:3.11-slim

# Metadatos de la imagen
LABEL maintainer="GENIUS INDUSTRIES" \
      version="2.0" \
      description="Optimized full-stack app with PostgreSQL, FastAPI, React"

# Variables de entorno optimizadas
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH="/app" \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    # Optimizaciones Python
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Crear usuario no-root desde el inicio (seguridad)
RUN groupadd -r appuser && useradd -r -g appuser -s /bin/bash appuser

# Instalar dependencias del sistema en una sola capa (optimización de capas)
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL 15
    postgresql-15 \
    postgresql-client-15 \
    postgresql-contrib-15 \
    # Nginx
    nginx \
    # Supervisor para manejo de procesos
    supervisor \
    # Utilidades esenciales
    curl \
    build-essential \
    gosu \
    tzdata \
    ca-certificates \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y \
    # Configurar timezone
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# ==============================================================================
# POSTGRESQL OPTIMIZATION
# ==============================================================================
USER postgres

# Inicializar PostgreSQL y crear DB con configuración optimizada
RUN /etc/init.d/postgresql start && \
    psql --command "CREATE USER genius WITH SUPERUSER PASSWORD 'KhloeMF0911$';" && \
    createdb -O genius genius_dev && \
    # Configuraciones de rendimiento
    psql -d genius_dev -c "ALTER SYSTEM SET shared_buffers = '256MB';" && \
    psql -d genius_dev -c "ALTER SYSTEM SET effective_cache_size = '1GB';" && \
    psql -d genius_dev -c "ALTER SYSTEM SET maintenance_work_mem = '64MB';" && \
    psql -d genius_dev -c "ALTER SYSTEM SET checkpoint_completion_target = 0.9;" && \
    psql -d genius_dev -c "ALTER SYSTEM SET wal_buffers = '16MB';" && \
    psql -d genius_dev -c "ALTER SYSTEM SET default_statistics_target = 100;" && \
    psql -d genius_dev -c "ALTER SYSTEM SET random_page_cost = 1.1;" && \
    psql -d genius_dev -c "ALTER SYSTEM SET effective_io_concurrency = 200;" && \
    psql -d genius_dev -c "SELECT pg_reload_conf();" && \
    /etc/init.d/postgresql stop

# Configurar autenticación PostgreSQL
COPY --chown=postgres:postgres <<EOF /etc/postgresql/15/main/pg_hba.conf
# Configuración de autenticación optimizada
local   all             postgres                                peer
local   all             all                                     md5
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
host    all             all             0.0.0.0/0               md5
EOF

USER root

# ==============================================================================
# BACKEND OPTIMIZATION
# ==============================================================================
WORKDIR /app

# Copiar requirements primero para aprovechar Docker cache
COPY backend/requirements.txt backend/pyproject.toml ./

# Instalar dependencias Python con optimizaciones
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --compile -r requirements.txt && \
    pip cache purge && \
    # Limpiar archivos temporales
    rm -rf /tmp/* /var/tmp/*

# Copiar código del backend
COPY backend/app ./app

# Variables de entorno para producción (configurables via Dokploy)
ENV DATABASE_URL="postgresql://genius:KhloeMF0911$@localhost:5432/genius_dev" \
    POSTGRES_SERVER="localhost" \
    POSTGRES_PORT="5432" \
    POSTGRES_DB="genius_dev" \
    POSTGRES_USER="genius" \
    POSTGRES_PASSWORD="KhloeMF0911$" \
    ENVIRONMENT="production" \
    DOMAIN="geniusindustries.org" \
    API_DOMAIN="api.geniusindustries.org" \
    BACKEND_CORS_ORIGINS="https://geniusindustries.org,https://www.geniusindustries.org" \
    SECRET_KEY="genius-industries-super-secret-key-2025" \
    ACCESS_TOKEN_EXPIRE_MINUTES="43200" \
    FIRST_SUPERUSER="ceo@geniusindustries.org" \
    FIRST_SUPERUSER_PASSWORD="GeniusCEO2025!" \
    CEO_USER="ceo@geniusindustries.org" \
    CEO_USER_PASSWORD="GeniusCEO2025!" \
    ADMIN_USER="ceo@geniusindustries.org" \
    ADMIN_PASSWORD="GeniusCEO2025!" \
    # Optimizaciones FastAPI/Uvicorn
    UVICORN_WORKERS=1 \
    UVICORN_MAX_REQUESTS=1000 \
    UVICORN_MAX_REQUESTS_JITTER=50

# ==============================================================================
# FRONTEND OPTIMIZATION
# ==============================================================================
# Copiar frontend construido desde el stage anterior
COPY --from=frontend-builder /frontend/dist /var/www/html

# Configurar permisos optimizados
RUN chown -R www-data:www-data /var/www/html && \
    find /var/www/html -type d -exec chmod 755 {} \; && \
    find /var/www/html -type f -exec chmod 644 {} \;

# ==============================================================================
# NGINX OPTIMIZATION
# ==============================================================================
# Configurar Nginx con configuración optimizada
COPY nginx/dokploy.conf /etc/nginx/sites-available/default

# Configuración principal de Nginx optimizada
COPY --chown=root:root <<EOF /etc/nginx/nginx.conf
# Configuración optimizada para Dokploy
user www-data;
worker_processes auto;
worker_rlimit_nofile 65535;
pid /run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Optimizaciones de rendimiento
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Seguridad
    server_tokens off;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Logging optimizado
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main buffer=16k flush=5s;
    error_log /var/log/nginx/error.log warn;
    
    # Compresión
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;
    
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF

# ==============================================================================
# SUPERVISOR OPTIMIZATION
# ==============================================================================
# Configuración de Supervisor optimizada
COPY --chown=root:root <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
loglevel=info
minfds=1024
minprocs=200

[program:postgresql]
command=/usr/lib/postgresql/15/bin/postgres -D /var/lib/postgresql/15/main -c config_file=/etc/postgresql/15/main/postgresql.conf
user=postgres
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/postgresql.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5
priority=10
startsecs=10
stopwaitsecs=30

[program:backend]
command=uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers %(ENV_UVICORN_WORKERS)s --max-requests %(ENV_UVICORN_MAX_REQUESTS)s --max-requests-jitter %(ENV_UVICORN_MAX_REQUESTS_JITTER)s
directory=/app
user=appuser
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/backend.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5
environment=DATABASE_URL="%(ENV_DATABASE_URL)s",POSTGRES_SERVER="%(ENV_POSTGRES_SERVER)s",POSTGRES_PORT="%(ENV_POSTGRES_PORT)s",POSTGRES_DB="%(ENV_POSTGRES_DB)s",POSTGRES_USER="%(ENV_POSTGRES_USER)s",POSTGRES_PASSWORD="%(ENV_POSTGRES_PASSWORD)s",ENVIRONMENT="%(ENV_ENVIRONMENT)s",DOMAIN="%(ENV_DOMAIN)s",API_DOMAIN="%(ENV_API_DOMAIN)s",BACKEND_CORS_ORIGINS="%(ENV_BACKEND_CORS_ORIGINS)s",SECRET_KEY="%(ENV_SECRET_KEY)s",ACCESS_TOKEN_EXPIRE_MINUTES="%(ENV_ACCESS_TOKEN_EXPIRE_MINUTES)s",FIRST_SUPERUSER="%(ENV_FIRST_SUPERUSER)s",FIRST_SUPERUSER_PASSWORD="%(ENV_FIRST_SUPERUSER_PASSWORD)s"
priority=20
startsecs=10
stopwaitsecs=30

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/nginx.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5
priority=30
startsecs=5
stopwaitsecs=30

[group:genius-industries]
programs=postgresql,backend,nginx
priority=999

[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
EOF

# ==============================================================================
# STARTUP SCRIPT OPTIMIZATION
# ==============================================================================
# Script de inicio optimizado
COPY --chmod=755 <<EOF /start-dokploy.sh
#!/bin/bash
set -euo pipefail

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] \$1" >&2
}

log "🚀 Iniciando GENIUS INDUSTRIES (Optimizado para Dokploy)..."

# Crear directorios necesarios
mkdir -p /var/log/{supervisor,genius,nginx,postgresql} \
         /var/run/postgresql \
         /var/lib/postgresql/15/main

# Configurar permisos
chown -R postgres:postgres /var/lib/postgresql /var/run/postgresql
chmod 755 /var/run/postgresql

# Inicializar PostgreSQL si es necesario
if [ ! -d "/var/lib/postgresql/15/main/base" ]; then
    log "🔧 Inicializando cluster PostgreSQL..."
    su - postgres -c "/usr/lib/postgresql/15/bin/initdb -D /var/lib/postgresql/15/main"
fi

# Iniciar PostgreSQL temporalmente para configuración
log "🐘 Iniciando PostgreSQL para configuración inicial..."
su - postgres -c "pg_ctl -D /var/lib/postgresql/15/main -l /var/log/postgresql/startup.log start" || true

# Esperar PostgreSQL
for i in {1..30}; do
    if su - postgres -c "pg_isready -d postgres" 2>/dev/null; then
        log "✅ PostgreSQL listo!"
        break
    fi
    log "Esperando PostgreSQL... (\$i/30)"
    sleep 2
done

# Configurar base de datos
log "📊 Configurando base de datos..."
su - postgres -c "psql -c \"CREATE USER genius WITH SUPERUSER PASSWORD 'KhloeMF0911\$';\"" 2>/dev/null || true
su - postgres -c "createdb -O genius genius_dev" 2>/dev/null || true

# Ejecutar migraciones
log "📊 Ejecutando migraciones..."
cd /app
if [ -d "app/alembic" ]; then
    python -m alembic upgrade head || log "⚠️ Error en migraciones, continuando..."
fi

# Crear usuario CEO
log "👑 Verificando usuario CEO..."
python -c "
import asyncio
import sys
sys.path.append('/app')

async def create_ceo_user():
    try:
        from app.core.db import get_session
        from app.models import User
        from sqlalchemy import select
        from passlib.context import CryptContext
        
        pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
        
        async with get_session() as session:
            stmt = select(User).where(User.email == '\${CEO_USER}')
            result = await session.execute(stmt)
            existing_user = result.scalar_one_or_none()
            
            if not existing_user:
                hashed_password = pwd_context.hash('\${CEO_USER_PASSWORD}')
                ceo_user = User(
                    email='\${CEO_USER}',
                    hashed_password=hashed_password,
                    full_name='Chief Executive Officer',
                    role='CEO',
                    is_active=True,
                    is_superuser=True,
                    phone='+57 300 123 4567'
                )
                session.add(ceo_user)
                await session.commit()
                print('✅ Usuario CEO creado')
            else:
                print('ℹ️ Usuario CEO ya existe')
                
    except Exception as e:
        print(f'⚠️ Error con usuario CEO: {e}')

asyncio.run(create_ceo_user())
" || log "⚠️ Error configurando CEO, continuando..."

# Parar PostgreSQL temporal
su - postgres -c "pg_ctl -D /var/lib/postgresql/15/main stop" 2>/dev/null || true

# Configurar logs
touch /var/log/supervisor/{supervisord,postgresql,backend,nginx}.log
chown root:root /var/log/supervisor/*.log

# Verificar configuraciones
nginx -t && log "✅ Nginx config OK" || log "⚠️ Nginx config error"

log "✅ Configuración completada. Iniciando Supervisor..."

# Iniciar Supervisor
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

# ==============================================================================
# FINAL OPTIMIZATIONS
# ==============================================================================
# Configurar healthcheck optimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Crear directorios finales y configurar permisos
RUN mkdir -p /var/log/{supervisor,genius,nginx,postgresql} \
             /var/run/postgresql \
             /var/lib/postgresql/15/main && \
    chown -R appuser:appuser /app && \
    chown -R postgres:postgres /var/lib/postgresql /var/run/postgresql && \
    chmod 755 /var/run/postgresql

# Exponer puertos
EXPOSE 80

# Usar ENTRYPOINT para mejor manejo de señales
ENTRYPOINT ["/start-dokploy.sh"]

# Metadata final
LABEL org.opencontainers.image.source="https://github.com/genius-industries/genius-industries" \
      org.opencontainers.image.documentation="https://geniusindustries.org/docs" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.version="2.0-optimized" 