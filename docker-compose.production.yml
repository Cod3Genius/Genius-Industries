# 🏢 GENIUS INDUSTRIES - Docker Compose para Producción (Dokploy)
# Servicios: PostgreSQL + Backend (FastAPI) + Frontend (React/Vite) + Nginx

version: '3.8'

services:
  # PostgreSQL Database - Producción
  postgres:
    image: postgres:14-alpine
    container_name: genius-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-genius_prod}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --encoding=UTF-8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres-backups:/backups
    networks:
      - genius-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-genius_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend FastAPI Service - Producción
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: genius-backend-prod
    restart: always
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-genius_prod}
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-genius_prod}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
      # Pool Settings para producción
      - POSTGRES_POOL_SIZE=20
      - POSTGRES_MAX_OVERFLOW=30
      - POSTGRES_POOL_TIMEOUT=30
      - POSTGRES_POOL_RECYCLE=3600
      
      # Clerk Auth
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_WEBHOOK_SECRET=${CLERK_WEBHOOK_SECRET}
      
      # Application
      - SECRET_KEY=${SECRET_KEY}
      - PROJECT_NAME=Genius Industries
      - API_V1_STR=/api/v1
      - STACK_NAME=genius-industries-prod
      - VERSION=1.0.0
      
      # Domain & CORS
      - DOMAIN=${DOMAIN:-geniusindustries.org}
      - FRONTEND_HOST=https://${DOMAIN:-geniusindustries.org}
      - ENVIRONMENT=production
      - BACKEND_CORS_ORIGINS=https://${DOMAIN:-geniusindustries.org},https://api.${DOMAIN:-geniusindustries.org}
      
      # Features
      - ENABLE_DOCS=${ENABLE_DOCS:-false}
      - ENABLE_TEST_ROUTE=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Storage
      - STORAGE_BUCKET=${STORAGE_BUCKET:-genius-storage-prod}
      
      # Email (opcional)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME:-Genius Industries}
      
      # Sentry (opcional)
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - genius-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend React/Vite Service - Producción
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: genius-frontend-prod
    restart: always
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - genius-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy - Producción
  nginx:
    image: nginx:alpine
    container_name: genius-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - genius-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service (Opcional)
  backup:
    image: postgres:14-alpine
    container_name: genius-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data:ro
      - ./postgres-backups:/backups
    networks:
      - genius-prod-network
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-genius_prod} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed at $$(date)'
          sleep 86400
        done
      "
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup  # Solo se ejecuta con --profile backup

volumes:
  postgres_prod_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  genius-prod-network:
    driver: bridge
    name: genius-prod-network
