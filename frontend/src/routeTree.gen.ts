/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as ClientClientPortalImport } from './routes/client/ClientPortal'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutLegalImport } from './routes/_layout/legal'
import { Route as LayoutItemsImport } from './routes/_layout/items'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutAboutImport } from './routes/_layout/about'
import { Route as LayoutLegalIndexImport } from './routes/_layout/legal/index'
import { Route as LayoutLegalTemplatesImport } from './routes/_layout/legal/templates'
import { Route as LayoutLegalGeneratorImport } from './routes/_layout/legal/generator'
import { Route as LayoutLegalDocumentsImport } from './routes/_layout/legal/documents'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const ClientClientPortalRoute = ClientClientPortalImport.update({
  path: '/client/ClientPortal',
  getParentRoute: () => rootRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLegalRoute = LayoutLegalImport.update({
  path: '/legal',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutItemsRoute = LayoutItemsImport.update({
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAboutRoute = LayoutAboutImport.update({
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLegalIndexRoute = LayoutLegalIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutLegalRoute,
} as any)

const LayoutLegalTemplatesRoute = LayoutLegalTemplatesImport.update({
  path: '/templates',
  getParentRoute: () => LayoutLegalRoute,
} as any)

const LayoutLegalGeneratorRoute = LayoutLegalGeneratorImport.update({
  path: '/generator',
  getParentRoute: () => LayoutLegalRoute,
} as any)

const LayoutLegalDocumentsRoute = LayoutLegalDocumentsImport.update({
  path: '/documents',
  getParentRoute: () => LayoutLegalRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/about': {
      preLoaderRoute: typeof LayoutAboutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/items': {
      preLoaderRoute: typeof LayoutItemsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/legal': {
      preLoaderRoute: typeof LayoutLegalImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/client/ClientPortal': {
      preLoaderRoute: typeof ClientClientPortalImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/legal/documents': {
      preLoaderRoute: typeof LayoutLegalDocumentsImport
      parentRoute: typeof LayoutLegalImport
    }
    '/_layout/legal/generator': {
      preLoaderRoute: typeof LayoutLegalGeneratorImport
      parentRoute: typeof LayoutLegalImport
    }
    '/_layout/legal/templates': {
      preLoaderRoute: typeof LayoutLegalTemplatesImport
      parentRoute: typeof LayoutLegalImport
    }
    '/_layout/legal/': {
      preLoaderRoute: typeof LayoutLegalIndexImport
      parentRoute: typeof LayoutLegalImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAboutRoute,
    LayoutAdminRoute,
    LayoutItemsRoute,
    LayoutLegalRoute.addChildren([
      LayoutLegalDocumentsRoute,
      LayoutLegalGeneratorRoute,
      LayoutLegalTemplatesRoute,
      LayoutLegalIndexRoute,
    ]),
    LayoutSettingsRoute,
    LayoutIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SignupRoute,
  ClientClientPortalRoute,
])

/* prettier-ignore-end */
